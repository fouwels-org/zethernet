##! Implements base functionality for eniplg analysis.
##! Generates the Eniplg.log file.

# Generated by binpac_quickstart

module Eniplg;

export {
	redef enum Log::ID += { LOG };

	type Info: record {
		## Timestamp for when the event happened.
		ts:     time    &log;
		## Unique ID for the connection.
		uid:    string  &log;
		## The connection's 4-tuple of endpoint addresses/ports.
		id:     conn_id &log;
		
		# ## TODO: Add other fields here that you'd like to log.
	};

	## Event that can be handled to access the eniplg record as it is sent on
	## to the loggin framework.
	global log_eniplg: event(rec: Info);
}

# TODO: The recommended method to do dynamic protocol detection
# (DPD) is with the signatures in dpd.sig. If you can't come up
# with any signatures, then you can do port-based detection by
# uncommenting the following and specifying the port(s):

const tcp_ports = { 44818/tcp };
const udp_ports = { 2222/udp, 44818/udp  };
redef likely_server_ports += { tcp_ports };
redef likely_server_ports += { udp_ports };

event zeek_init() &priority=5
	{
	Log::create_stream(Eniplg::LOG, [$columns=Info, $ev=log_eniplg, $path="eniplg"]);
	Analyzer::register_for_ports(Analyzer::ANALYZER_ENIPLG_TCP, tcp_ports);
	Analyzer::register_for_ports(Analyzer::ANALYZER_ENIPLG_UDP, udp_ports);
	}

event eniplg_event(c: connection)
	{
	local info: Info;
	info$ts  = network_time();
	info$uid = c$uid;
	info$id  = c$id;

	Log::write(Eniplg::LOG, info);
	}