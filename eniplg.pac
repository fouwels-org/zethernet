# Generated by binpac_quickstart

# Analyzer for eniplg
#  - eniplg-protocol.pac: describes the eniplg protocol messages
#  - eniplg-analyzer.pac: describes the eniplg analyzer code

%include binpac.pac
%include bro.pac

%extern{
	#include "events.bif.h"
%}

analyzer ENIPLG withcontext {
	connection: ENIPLG_Conn;
	flow:       ENIPLG_Flow;
};

# Our connection consists of two flows, one in each direction.
connection ENIPLG_Conn(bro_analyzer: BroAnalyzer) {
	upflow   = ENIPLG_Flow(true);
	downflow = ENIPLG_Flow(false);
};

%include eniplg-protocol.pac

enum command_codes {
    NOP                 = 0x0000,
    LIST_SERVICES       = 0x0004,
    LIST_IDENTITY       = 0x0063,
    LIST_INTERFACES     = 0x0064,
    REGISTER_SESSION    = 0x0065,
    UNREGISTER_SESSION  = 0x0066,
    SEND_RR_DATA        = 0x006F,
    SEND_UNIT_DATA      = 0x0070,
    INDICATE_STATUS     = 0x0072,
    CANCEL              = 0x0073,
    # Other values are Reserved for future usage or Reserved for legacy
    };

# Now we define the flow:
flow ENIPLG_Flow(is_orig: bool) {

	# ## TODO: Determine if you want flowunit or datagram parsing:

	# Using flowunit will cause the anlayzer to buffer incremental input.
	# This is needed for &oneline and &length. If you don't need this, you'll
	# get better performance with datagram.

    #flowunit = ENIPLG_PDU(is_orig) withcontext(connection, this);
	datagram = ENIPLG_PDU(is_orig) withcontext(connection, this);

};

%include eniplg-analyzer.pac